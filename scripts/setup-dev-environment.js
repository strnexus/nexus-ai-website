#!/usr/bin/env node

/**
 * Development Environment Setup Script
 * 
 * Automates the setup of local development environment for the AI tools data pipeline.
 * This script helps developers get started quickly with proper configuration.
 */

const fs = require('fs');
const path = require('path');
const readline = require('readline');

console.log('🚀 Setting up Development Environment for AI Tools Data Pipeline\n');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

// Configuration storage
const config = {};

/**
 * Ask user for input with validation
 */
function askQuestion(question, validator, optional = false) {
  return new Promise((resolve) => {
    const ask = () => {
      rl.question(question, (answer) => {
        if (optional && answer.trim() === '') {
          resolve('');
          return;
        }
        
        if (validator && !validator(answer)) {
          console.log('❌ Invalid input. Please try again.');
          ask();
          return;
        }
        
        resolve(answer.trim());
      });
    };
    ask();
  });
}

/**
 * Create required directories
 */
function createDirectories() {
  console.log('📁 Creating required directories...');
  
  const directories = [
    'data',
    'data/backups',
    'data/reports',
    'data/metadata',
    'logs',
    'cache',
    'scripts/data-pipeline/output'
  ];
  
  directories.forEach(dir => {
    const fullPath = path.join(process.cwd(), dir);
    if (!fs.existsSync(fullPath)) {
      fs.mkdirSync(fullPath, { recursive: true });
      console.log(`  ✅ Created: ${dir}`);
    } else {
      console.log(`  ✅ Exists: ${dir}`);
    }
  });
}

/**
 * Create .env file from template
 */
function createEnvFile() {
  console.log('\n📝 Creating .env file...');
  
  const envPath = path.join(process.cwd(), '.env');
  const examplePath = path.join(process.cwd(), '.env.example');
  
  if (fs.existsSync(envPath)) {
    console.log('  ⚠️  .env file already exists. Backing up to .env.backup');
    fs.copyFileSync(envPath, envPath + '.backup');
  }
  
  let envContent = '';
  
  // Read template if it exists
  if (fs.existsSync(examplePath)) {
    envContent = fs.readFileSync(examplePath, 'utf-8');
  } else {
    // Create basic template if example doesn't exist
    envContent = `# AI Tools Data Pipeline - Development Environment
# Generated by setup-dev-environment.js

# API Keys
THERESANAIFORTHAT_API_KEY=${config.taiftKey || 'your_api_key_here'}
PRODUCTHUNT_CLIENT_ID=${config.phClientId || 'your_client_id_here'}
PRODUCTHUNT_CLIENT_SECRET=${config.phSecret || 'your_secret_here'}
PRODUCTHUNT_ACCESS_TOKEN=${config.phToken || 'your_token_here'}

# Database
DATABASE_URL=${config.databaseUrl || 'postgresql://postgres:password@localhost:5432/nexus_ai_dev'}

# Notifications
SLACK_WEBHOOK=${config.slackWebhook || 'https://hooks.slack.com/services/...'}

# Development Settings
NODE_ENV=development
LOG_LEVEL=debug
PIPELINE_DRY_RUN=true
VERBOSE_OUTPUT=true

# Generated on: ${new Date().toISOString()}
`;
  }
  
  // Replace placeholder values with collected configuration
  Object.entries(config).forEach(([key, value]) => {
    if (value && value !== '') {
      const envKey = key.toUpperCase().replace(/([A-Z])/g, '_$1').replace(/^_/, '');
      const regex = new RegExp(`${envKey}=.*`, 'g');
      envContent = envContent.replace(regex, `${envKey}=${value}`);
    }
  });
  
  fs.writeFileSync(envPath, envContent);
  console.log('  ✅ Created .env file');
}

/**
 * Create sample data file if needed
 */
function createSampleData() {
  console.log('\n📊 Setting up sample data...');
  
  const dataPath = path.join(process.cwd(), 'data', 'ai-tools.json');
  
  if (!fs.existsSync(dataPath)) {
    const sampleData = [
      {
        id: 'sample-tool-1',
        name: 'Sample AI Tool',
        description: 'This is a sample AI tool for development and testing purposes.',
        category: 'development',
        pricing: 'Free',
        website: 'https://example.com',
        qualityScore: 7.5,
        smbRelevanceScore: 8.0,
        source: {
          name: 'manual',
          url: 'local-development',
          lastUpdated: new Date().toISOString()
        },
        lastUpdated: new Date().toISOString(),
        tags: ['development', 'testing', 'sample']
      }
    ];
    
    fs.writeFileSync(dataPath, JSON.stringify(sampleData, null, 2));
    console.log('  ✅ Created sample data file');
  } else {
    console.log('  ✅ Data file already exists');
  }
}

/**
 * Initialize Git ignore patterns if needed
 */
function updateGitignore() {
  console.log('\n📋 Updating .gitignore...');
  
  const gitignorePath = path.join(process.cwd(), '.gitignore');
  const patterns = [
    '# Environment variables',
    '.env',
    '.env.local',
    '.env.*.local',
    '',
    '# Data pipeline specific',
    'data/backups/',
    'data/reports/',
    'data/metadata/',
    'logs/',
    'cache/',
    '*.log',
    '',
    '# Node modules',
    'node_modules/',
    'npm-debug.log*',
    '',
    '# IDE',
    '.vscode/',
    '.idea/',
    '*.swp',
    '*.swo',
    '',
    '# OS',
    '.DS_Store',
    'Thumbs.db',
    '',
    '# Testing',
    'coverage/',
    '.nyc_output/',
    ''
  ];
  
  let gitignoreContent = '';
  
  if (fs.existsSync(gitignorePath)) {
    gitignoreContent = fs.readFileSync(gitignorePath, 'utf-8');
  }
  
  // Add missing patterns
  const newPatterns = patterns.filter(pattern => 
    !gitignoreContent.includes(pattern.trim())
  );
  
  if (newPatterns.length > 0) {
    gitignoreContent += '\n' + newPatterns.join('\n');
    fs.writeFileSync(gitignorePath, gitignoreContent);
    console.log('  ✅ Updated .gitignore with pipeline patterns');
  } else {
    console.log('  ✅ .gitignore already up to date');
  }
}

/**
 * Create package.json scripts if needed
 */
function updatePackageScripts() {
  console.log('\n📦 Updating package.json scripts...');
  
  const packagePath = path.join(process.cwd(), 'package.json');
  
  if (!fs.existsSync(packagePath)) {
    console.log('  ⚠️  No package.json found. You may need to run npm init.');
    return;
  }
  
  const packageJson = JSON.parse(fs.readFileSync(packagePath, 'utf-8'));
  
  const scripts = {
    'validate-env': 'node scripts/validate-environment.js',
    'setup-dev': 'node scripts/setup-dev-environment.js',
    'pipeline': 'npm run pipeline --prefix scripts/data-pipeline',
    'pipeline:dry': 'npm run pipeline -- --dry-run',
    'pipeline:health': 'npx ts-node src/data-pipeline/scripts/safety-cli.ts health --verbose',
    'pipeline:safety': 'npx ts-node src/data-pipeline/scripts/safety-cli.ts check',
    'pipeline:monitor': 'npx ts-node src/data-pipeline/scripts/safety-cli.ts monitor',
    'test:apis': 'node scripts/test-api-connections.js',
    'test:db': 'node scripts/test-database-connection.js'
  };
  
  if (!packageJson.scripts) {
    packageJson.scripts = {};
  }
  
  let added = 0;
  Object.entries(scripts).forEach(([name, command]) => {
    if (!packageJson.scripts[name]) {
      packageJson.scripts[name] = command;
      added++;
    }
  });
  
  if (added > 0) {
    fs.writeFileSync(packagePath, JSON.stringify(packageJson, null, 2));
    console.log(`  ✅ Added ${added} pipeline scripts to package.json`);
  } else {
    console.log('  ✅ Package.json scripts already up to date');
  }
}

/**
 * Show completion summary and next steps
 */
function showCompletionSummary() {
  console.log('\n' + '='.repeat(60));
  console.log('🎉 DEVELOPMENT ENVIRONMENT SETUP COMPLETE!');
  console.log('='.repeat(60));
  
  console.log('\n📋 What was set up:');
  console.log('  ✅ Required directories created');
  console.log('  ✅ .env file configured');
  console.log('  ✅ Sample data file created');
  console.log('  ✅ .gitignore updated');
  console.log('  ✅ Package.json scripts added');
  
  console.log('\n🔥 Next Steps:');
  console.log('  1. Review and update your .env file with real API keys');
  console.log('  2. Set up a PostgreSQL database for development');
  console.log('  3. Create a Slack webhook for notifications (optional)');
  console.log('  4. Run: npm run validate-env');
  console.log('  5. Test the pipeline: npm run pipeline:dry');
  
  console.log('\n🔧 Useful Commands:');
  console.log('  npm run validate-env     - Validate environment configuration');
  console.log('  npm run pipeline:health  - Check pipeline health');
  console.log('  npm run pipeline:dry     - Run pipeline in dry-run mode');
  console.log('  npm run pipeline:safety  - Run safety validation');
  console.log('  npm run pipeline:monitor - Monitor pipeline in real-time');
  
  console.log('\n📚 Documentation:');
  console.log('  docs/SECRETS_SETUP.md           - Detailed setup instructions');
  console.log('  .github/security/PERMISSIONS.md - Security configuration guide');
  console.log('  .env.example                    - Environment variables template');
  
  console.log('\n⚠️  Important Security Reminders:');
  console.log('  🔐 Never commit .env file to version control');
  console.log('  🔐 Use separate API keys for development and production');
  console.log('  🔐 Keep API keys secure and rotate them regularly');
  console.log('  🔐 Test the emergency rollback procedures');
  
  console.log('\n💬 Need Help?');
  console.log('  - Check the docs/SECRETS_SETUP.md for detailed instructions');
  console.log('  - Run npm run validate-env to diagnose configuration issues');
  console.log('  - Review GitHub Actions logs for deployment troubleshooting');
}

/**
 * Main setup flow
 */
async function main() {
  try {
    console.log('This script will help you set up your local development environment.');
    console.log('You can skip optional steps by pressing Enter.\n');
    
    // Step 1: Collect API configuration
    console.log('🔑 API Configuration');
    console.log('────────────────────');
    
    config.taiftKey = await askQuestion(
      'There Is An AI For That API Key (starts with taift_): ',
      (val) => !val || val.startsWith('taift_'),
      true
    );
    
    config.phClientId = await askQuestion(
      'Product Hunt Client ID (starts with ph_): ',
      (val) => !val || val.startsWith('ph_'),
      true
    );
    
    config.phSecret = await askQuestion(
      'Product Hunt Client Secret (starts with ph_secret_): ',
      (val) => !val || val.startsWith('ph_secret_'),
      true
    );
    
    config.phToken = await askQuestion(
      'Product Hunt Access Token (starts with ph_token_): ',
      (val) => !val || val.startsWith('ph_token_'),
      true
    );
    
    // Step 2: Database configuration
    console.log('\n🗄️  Database Configuration');
    console.log('─────────────────────────');
    
    config.databaseUrl = await askQuestion(
      'PostgreSQL Database URL [postgresql://postgres:password@localhost:5432/nexus_ai_dev]: ',
      (val) => !val || val.startsWith('postgresql://') || val.startsWith('postgres://'),
      true
    );
    
    if (!config.databaseUrl) {
      config.databaseUrl = 'postgresql://postgres:password@localhost:5432/nexus_ai_dev';
    }
    
    // Step 3: Notification configuration
    console.log('\n📢 Notification Configuration');
    console.log('────────────────────────────');
    
    config.slackWebhook = await askQuestion(
      'Slack Webhook URL (optional): ',
      (val) => !val || val.startsWith('https://hooks.slack.com/'),
      true
    );
    
    rl.close();
    
    // Execute setup steps
    console.log('\n🔧 Setting up environment...\n');
    
    createDirectories();
    createEnvFile();
    createSampleData();
    updateGitignore();
    updatePackageScripts();
    
    showCompletionSummary();
    
  } catch (error) {
    console.error('❌ Setup failed:', error.message);
    process.exit(1);
  }
}

// Run setup
if (require.main === module) {
  main();
}